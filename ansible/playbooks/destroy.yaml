---
- name: Uninstall kubernetes
  hosts: kubernetes
  become: true
  vars:
    allow_storage_cleanup: false
  vars_prompt:
    - name: uninstall_confirmation
      prompt: |-
        Are you sure you want to destroy and uninstall this cluster?
        Type DESTROY to proceed
      default: "n"
      private: false

    - name: reboot_confirmation
      prompt: |-
        Do you want to allow a reboot?
        Type "y" or "n"
      default: "n"
      private: false

  pre_tasks:
    - name: Check for confirmation
      ansible.builtin.fail:
        msg: Aborted nuking the cluster
      when: uninstall_confirmation != 'DESTROY'

  tasks:
    - name: Stop Kubernetes
      ansible.builtin.include_role:
        name: xanmanning.k3s
        public: true
      ignore_errors: true
      vars:
        k3s_state: stopped

    - name: Delete Cilium links
      ansible.builtin.command:
        cmd: "ip link delete {{ item }}"
        removes: "/sys/class/net/{{ item }}"
      loop: [cilium_host, cilium_net, cilium_vxlan]

    - name: Flush iptables
      ansible.builtin.iptables:
        table: "{{ item }}"
        flush: true
      loop: [filter, nat, mangle, raw]

    - name: Flush ip6tables
      ansible.builtin.iptables:
        table: "{{ item }}"
        flush: true
        ip_version: ipv6
      loop: [filter, nat, mangle, raw]

    - name: Delete CNI conf directory
      ansible.builtin.file:
        path: /etc/cni/net.d
        state: absent

    - name: Gather list of CNI files
      ansible.builtin.find:
        paths: /etc/cni/net.d
        patterns: "*"
        hidden: true
      register: directory_contents

    - name: Delete CNI files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ directory_contents.files }}"

    - name: Delete other directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /var/lib/rook
        - /etc/rancher
        - /var/lib/rancher

    - name: Now just flush all iptables rules for good measure...
      ansible.builtin.shell: |
        iptables -P INPUT ACCEPT;
        iptables -P FORWARD ACCEPT;
        iptables -P OUTPUT ACCEPT;
        iptables -t nat -F;
        iptables -t mangle -F;
        iptables -F;
        iptables -X;

        ip6tables -P INPUT ACCEPT;
        ip6tables -P FORWARD ACCEPT;
        ip6tables -P OUTPUT ACCEPT;
        ip6tables -t nat -F;
        ip6tables -t mangle -F;
        ip6tables -F;
        ip6tables -X;

    - name: Check to see if k3s-killall.sh exits
      ansible.builtin.stat:
        path: /usr/local/bin/k3s-killall.sh
      register: check_k3s_killall_script

    - name: Check to see if k3s-uninstall.sh exits
      ansible.builtin.stat:
        path: /usr/local/bin/k3s-uninstall.sh
      register: check_k3s_uninstall_script

    - name: Run k3s-killall.sh
      when: check_k3s_killall_script.stat.exists
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-killall.sh
      register: k3s_killall
      changed_when: k3s_killall.rc == 0

    - name: Run k3s-uninstall.sh
      when: check_k3s_uninstall_script.stat.exists
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-uninstall.sh
      args:
        removes: /usr/local/bin/k3s-uninstall.sh
      register: k3s_uninstall
      changed_when: k3s_uninstall.rc == 0

    - name: Uninstall k3s
      ansible.builtin.include_role:
        name: xanmanning.k3s
        public: true
      vars:
        k3s_state: uninstalled

    - name: Ensure hard links are removed
      when:
        - k3s_install_hard_links
        - not ansible_check_mode
      ansible.builtin.file:
        path: "{{ k3s_install_dir }}/{{ item }}"
        state: absent
      loop: ["kubectl", "crictl", "ctr"]

    - name: Cleanup storage
      when: allow_storage_cleanup
      block:
        - name: Remove local openebs storage path
          ansible.builtin.file:
            path: /var/openebs/local
            state: absent

        - name: Remove local longhorn storage path
          ansible.builtin.file:
            path: /var/lib/longhorn
            state: absent

    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
        reboot_timeout: 3600
      when: reboot_confirmation == 'y'
