---
- hosts: kubernetes
  become: true
  vars:
    allow_reboot: false
    allow_drain: false
  pre_tasks:
    - name: Get k3s service status
      ansible.builtin.systemd:
        name: k3s.service
      register: k3s_service_result
      when: allow_drain

    - name: Details
      ansible.builtin.command: "k3s kubectl get node {{ inventory_hostname }} -o json"
      register: kubectl_get_node
      delegate_to: "{{ groups['controllers'][0] }}"
      failed_when: false
      changed_when: false
      when: allow_drain

    - name: Set node facts
      ansible.builtin.set_fact:
        # When status.conditions[x].type == Ready then check stats.conditions[x].status for True|False
        node_ready: "{{ kubectl_get_node['stdout'] | from_json | json_query("status.conditions[?type == 'Ready'].status") }}"
        # If spec.unschedulable is defined then the node is cordoned
        node_not_cordoned: "{{ not (kubectl_get_node['stdout'] | from_json).spec.unschedulable is defined }}"
      when: allow_drain

    - name: Update
      when:
        - allow_drain
        - node_ready
        - node_not_cordoned
      block:
        - name: Cordon
          kubernetes.core.k8s_drain:
            name: "{{ inventory_hostname }}"
            kubeconfig: /etc/rancher/k3s/k3s.yaml
            state: cordon
          delegate_to: "{{ groups['controllers'][0] }}"

        - name: Drain
          kubernetes.core.k8s_drain:
            name: "{{ inventory_hostname }}"
            kubeconfig: /etc/rancher/k3s/k3s.yaml
            state: drain
            delete_options:
              delete_emptydir_data: true
              ignore_daemonsets: true
              terminate_grace_period: 600
              wait_timeout: 900
            pod_selectors:
              - app!=rook-ceph-osd # Rook Ceph
          delegate_to: "{{ groups['controllers'][0] }}"

        - name: Update
          ansible.builtin.apt:
            upgrade: dist
            update_cache: true

        - name: Check if reboot is required
          ansible.builtin.stat:
            path: /var/run/reboot-required
          register: reboot_required

        - name: Reboot
          when: reboot_required.stat.exists
          ansible.builtin.reboot:
            msg: Rebooting node
            post_reboot_delay: 60
            reboot_timeout: 3600

        - name: Set drained fact
          ansible.builtin.set_fact:
            drained: true

  roles:
    - role: upgrade
      vars:
        allow_reboot: "{{ allow_reboot if allow_reboot is defined else allow_drain }}"

  post_tasks:
    - name: Uncordon
      kubernetes.core.k8s_drain:
        name: "{{ inventory_hostname }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: uncordon
      delegate_to: "{{ groups['controllers'][0] }}"
      when:
        - allow_drain
        - drained is defined and drained
